services:
  web3signer:
    image: consensys/web3signer:${WEB3SIGNER_TAG:-develop}
    container_name: 'ws-develop'
    cap_add:
      - SYS_ADMIN  # Needed for profiling
    security_opt:
      - seccomp:unconfined  # Needed for profiling
    environment:
      - JAVA_OPTS=-Xmx2G
        -XX:+HeapDumpOnOutOfMemoryError
        -XX:HeapDumpPath=/heapdumps/web3signer_heapdump.hprof
        -XX:+CrashOnOutOfMemoryError
        -XX:+ExitOnOutOfMemoryError
        -XX:NativeMemoryTracking=summary
        -Dcom.sun.management.jmxremote
        -Dcom.sun.management.jmxremote.port=9010
        -Dcom.sun.management.jmxremote.rmi.port=9010
        -Dcom.sun.management.jmxremote.local.only=false
        -Dcom.sun.management.jmxremote.authenticate=false
        -Dcom.sun.management.jmxremote.ssl=false
        -Djava.rmi.server.hostname=localhost
    deploy:
      resources:
        limits:
          cpus: '2.0'    # Strictly limits to 2 CPU cores
          memory: 4G     # Hard memory limit of 4GB
    command:
      - --config-file=/var/config/config.yaml
      - eth2
    volumes:
      - ./config:/var/config
      - ./heapdumps:/heapdumps  # Directory for heap dumps
    ports:
      - "9000:9000"    # Web3Signer HTTP API
      - "9001:9001"    # Metrics endpoint
      - "9010:9010"    # JMX port for profiling
    networks:
      - internal_network
    depends_on:
      flyway:
        condition: service_completed_successfully

  # Extract SQL migration scripts from Web3Signer image
  web3signer_sql_scripts:
    build:
      context: .
      dockerfile: Dockerfile.sql-copier
      args:
        WEB3SIGNER_TAG: ${WEB3SIGNER_TAG:-develop}  # Inherits from env
    container_name: 'ws-sql-scripts'
    user: "0:0"  # Run as root to ensure permissions
    networks:
      - internal_network
    volumes:
      - sql:/flyway/sql
    restart: "no"  # Critical: ensures single run

  # PostgreSQL database service
  db:
    image: "docker.io/bitnami/postgresql:${PG_TAG:-14}"
    container_name: 'ws-pg'
    restart: on-failure
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=web3signer
      - POSTGRES_PORT_NUMBER=5432
    ports:
      - '5432:5432'
    networks:
      - internal_network
    volumes:
      - dbdata:/bitnami/postgresql
    depends_on:
      web3signer_sql_scripts:
        condition: service_completed_successfully

  # Flyway migration service to apply database migrations
  flyway:
    image: "docker.io/flyway/flyway:${FLYWAY_TAG:-latest}"
    container_name: 'ws-flyway'
    command: -locations="filesystem:./sql" -url=jdbc:postgresql://db:5432/web3signer -user=postgres -password=postgres -connectRetries=60 migrate
    volumes:
      - sql:/flyway/sql
    depends_on:
      db:
        condition: service_started
      web3signer_sql_scripts:
        condition: service_completed_successfully
    networks:
      - internal_network

# Volumes
volumes:
  dbdata:     # Persistent storage for PostgreSQL data
  sql:       # Volume for SQL migration scripts

# Network definition
networks:
  internal_network:
    name: '${INTERNAL_NETWORK_NAME:-w3s_network}'
    external: true  # Manually created network for internal communication